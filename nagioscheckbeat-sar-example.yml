################### Nagioscheckbeat Configuration Example #########################

############################# Nagioscheckbeat ######################################

nagioscheckbeat:
  checks:
    -
      name: "heartbeat"
      cmd: "/usr/lib64/nagios/plugins/check_dummy"
      args: "0 Hello"
    -
      name: "pagestat"
      cmd: "/usr/lib64/nagios/plugins/check_sar_perf.py"
      args: "pagestat"
    -
      name: "io"
      cmd: "/usr/lib64/nagios/plugins/check_sar_perf.py"
      args: "io_transfer"
    -
      name: "memory_util"
      cmd: "/usr/lib64/nagios/plugins/check_sar_perf.py"
      args: "memory_util"
    -
      name: "kernel"
      cmd: "/usr/lib64/nagios/plugins/check_sar_perf.py"
      args: "kernel"
    -
      name: "cpu"
      cmd: "/usr/lib64/nagios/plugins/check_sar_perf.py"
      args: "cpu"
    -
      name: "memory_stat"
      cmd: "/usr/lib64/nagios/plugins/check_sar_perf.py"
      args: "memory_stat"
    -
      name: "queueln_load"
      cmd: "/usr/lib64/nagios/plugins/check_sar_perf.py"
      args: "queueln_load"
    -
      name: "swap_util"
      cmd: "/usr/lib64/nagios/plugins/check_sar_perf.py"
      args: "swap_util"
    -
      name: "swap_stat"
      cmd: "/usr/lib64/nagios/plugins/check_sar_perf.py"
      args: "swap_stat"
    -
      name: "task"
      cmd: "/usr/lib64/nagios/plugins/check_sar_perf.py"
      args: "task"


#================================ General =====================================

# The name of the shipper that publishes the network data. It can be used to group
# all the transactions sent by a single shipper in the web interface.
#name:

# The tags of the shipper are included in their own field with each
# transaction published.
#tags: ["service-X", "web-tier"]

# Optional fields that you can specify to add additional information to the
# output.
#fields:
#  env: staging

#================================ Outputs =====================================

# Configure what outputs to use when sending the data collected by the beat.
# Multiple outputs may be used.

#-------------------------- Elasticsearch output ------------------------------
output.elasticsearch:
  # Array of hosts to connect to.
  hosts: ["localhost:9200"]

  # Optional protocol and basic auth credentials.
  #protocol: "https"
  #username: "elastic"
  #password: "changeme"

#----------------------------- Logstash output --------------------------------
#output.logstash:
  # The Logstash hosts
  #hosts: ["localhost:5044"]

  # Optional TLS. By default is off.
  # List of root certificates for HTTPS server verifications
  #tls.certificate_authorities: ["/etc/pki/root/ca.pem"]

  # Certificate for TLS client authentication
  #tls.certificate: "/etc/pki/client/cert.pem"

  # Client Certificate Key
  #tls.certificate_key: "/etc/pki/client/cert.key"

#================================ Logging =====================================

# Sets log level. The default log level is error.
# Available log levels are: critical, error, warning, info, debug
#logging.level: debug

# At debug level, you can selectively enable logging only for some components.
# To enable all selectors use ["*"]. Examples of other selectors are "beat",
# "publish", "service".
#logging.selectors: ["*"]
